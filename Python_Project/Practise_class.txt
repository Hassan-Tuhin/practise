watch this tutorial:
https://www.youtube.com/watch?v=ZDa-Z5JzLYM
https://www.youtube.com/watch?v=BJ-VvGyQxho

class Profile():
    def __init__(self,name,age,salary):#it's a constructor
        self.name=name
        self.age=age
        self.salary=salary
    
        
tuhin=Profile('Hassan',20,500000)
print(f"{tuhin.name}'s Profile... name:{tuhin.name}  age:{tuhin.age} salary:{tuhin.salary}")
shifu=Profile('Shifuddin',10,400000)
print(shifu.salary)
...................
class Profile():
    def __init__(self,fname,lname,age,salary):#it's a constructor
        self.fname=fname
        self.lname=lname
        self.age=age
        self.salary=salary
        self.email=fname+lname+'@gmail.com'

tuhin=Profile('Hassan','tuhin',20,500000)
print(tuhin.email)
tanbir=Profile('Tanbir','sakib',22,450000)
print(tanbir.email)
.....................
class Profile():
    def __init__(self,fname,lname,age,salary):
        self.fname=fname
        self.lname=lname
        self.age=age
        self.salary=salary
        self.email=fname+lname+'@gmail.com'

    def fullname(self):
        return '{}{}'.format(self.fname,self.lname)

tuhin=Profile('Hassan','Tuhin',20,500000)
print(tuhin.email)

print(tuhin.fullname())
print(tuhin.__dict__)
...........................
class Profile():
    def __init__(self,fname,lname,salary):
        self.fname=fname
        self.lname=lname
        self.salary=salary

    def apply_raise(self):
        self.salary=int(self.salary*1.04)

shifuddin=Profile('Shifuddin','Tushar',450000)
tuhin=Profile('Hassan','Tuhin',500000)

print(f"tuhin's salry {tuhin.salary}")
tuhin.apply_raise()
print("tuhin's salary after applying apply_raise")
print(tuhin.salary)

print(f"shifuddin's salary {shifuddin.salary}")
shifuddin.apply_raise()
print("shifuddin's salary after applying apply_raise")
print(shifuddin.salary)
..............................
class Profile():
    num_of_employee=0
    raise_amount=1.04
    def __init__(self,fname,lname,salary):
        self.fname=fname
        self.lname=lname
        self.salary=salary
        Profile.num_of_employee+=1 #this will count number of employees


    def apply_raise(self):
        self.salary=int(self.salary*Profile.raise_amount)

shifuddin=Profile('Shifuddin','Tushar',450000)
tuhin=Profile('Hassan','Tuhin',500000)

print(f"tuhin's salry {tuhin.salary}")
tuhin.apply_raise()
print("tuhin's salary after applying apply_raise")
print(tuhin.salary)

print(f"shifuddin's salary {shifuddin.salary}")
shifuddin.apply_raise()
print("shifuddin's salary after applying apply_raise")
print(shifuddin.salary)

print(f'Total employee:{Profile.num_of_employee}')

.........................
'''print(Profile.raise_amount)
print(tuhin.__dict__)
tuhin.raise_amount=1.05
print(tuhin.raise_amount)
print(tuhin.__dict__)
print(shifuddin.raise_amount)'''
...........................
...........................
CLASS METHOD and STATIC METHOD

watch: https://www.youtube.com/watch?v=rq8cL2XMM5M

class Profile():
    num_of_employee=0
    raise_amount=1.04
    def __init__(self,fname,lname,salary):
        self.fname=fname
        self.lname=lname
        self.salary=salary

        Profile.num_of_employee+=1 #this will count number of employees

    def apply_raise(self):
        self.salary=int(self.salary*Profile.raise_amount)

    @classmethod
    def set_raise_amount(cls, amount)://cls is a instance here
        cls.raise_amount=amount
    @classmethod
    def from_str(cls, emp_str): //cls is a instance here
        fname,lname,salary=emp_str.split('-')
        return cls(fname,lname,salary)

#tuhin=Profile('Hassan','Tuhin',500000)
#shifuddin=Profile('Shifuddin','Tushar',450000)
emp_str_1='Hassan-Tuhin-500000'
emp_str_2='Tanbir_sakib_499999'

new_emp_1=Profile.from_str(emp_str_1)
print(new_emp_1.fname)
..........................
@staticmethod
    def work_day(day):
        if day.weekday()==4 or day.weekday()==5:
            return False
        return True

import datetime
my_time=datetime.date(2020, 1, 5)#(year,month,day)
print(Profile.work_day(my_time))
.................................

class Profile():
    def __init__(self,fname,lname,salary):
        self.fname=fname
        self.lname=lname
        self.salary=salary
        self.email=fname+lname+'@gmail.com'

    def fullname(self):
        return '{}{}'.format(self.fname,self.lname)
class Developer(Profile):
    def __init__(self,fname,lname,salary,prog_lan):
        super().__init__(fname,lname,salary)
        self.prog_lan=prog_lan

class Manager(Profile):
    def __init__(self,fname,lname,salary,employees=None):
        super().__init__(fname,lname,salary)
        if employees is None:
            self.employees=[]
        else:
            self.employees=employees
    def add_emp(self,emp):
        if emp not in self.employees:
            self.employees.append(emp)
    def remove_emp(self,emp):
        if emp in self.employees:
            self.employees.remove(emp)
    def print_emp(self):
        for emp in self.employees:
            print('-->',emp.fullname())
    
profile1=Developer('Hasan',' Tuhin',500000,'Python')
profile2=Developer('Tanbir',' Sakib','499999','JS')
profile3=Developer('Baizid',' Mahmud',500000,'Python')
profile4=Developer('Emon',' yunus','499999','JS')
profile5=Developer('Sakib',' Ahmed',500000,'Python')
profile6=Developer('Joynal',' tamim','499999','JS')
profile7=Developer('Ariful',' islam',500000,'Python')
profile8=Developer('Shahedul',' islam','499999','JS')

mgr_1=Manager('Karim','Hossan',550000,[profile1,profile3,profile4,profile6])
print(mgr_1.email)
mgr_1.print_emp()#this is d Developer name whose are supervising by manager1

mgr_2=Manager('Shahed','karim',550000,[profile2,profile5,profile7,profile8])
print(mgr_2.email)
mgr_2.print_emp()#this is d Developer name whose are supervising by manager2

..........................................
mgr_1.add_emp(profile8)
mgr_1.print_emp()
print('after removing:')
mgr_1.remove_emp(profile8)
mgr_1.print_emp()
..............................
..............................

class Profile():
    def __init__(self,fname,lname,salary):
        self.fname=fname
        self.lname=lname
        self.salary=salary
        self.email=fname+lname+'@gmail.com'

    def fullname(self):
        return '{}{}'.format(self.fname,self.lname)
class Developer(Profile):
    def __init__(self,fname,lname,salary,prog_lan):
        super().__init__(fname,lname,salary)
        self.prog_lan=prog_lan

class Manager(Profile):
    def __init__(self,fname,lname,salary,employees=None):
        super().__init__(fname,lname,salary)
        if employees is None:
            self.employees=[]
        else:
            self.employees=employees
    def add_emp(self,emp):
        if emp not in self.employees:
            self.employees.append(emp)
    def remove_emp(self,emp):
        if emp in self.employees:
            self.employees.remove(emp)
    def print_emp(self):
        for emp in self.employees:
            print('-->',emp.fullname())
    #def __str__(self):
     #   return f'{self.fname} {self.lname} {self.salary}'
    def __repr__(self):
        return f'{self.fname}{self.lname}{self.salary}'    
profile1=Profile('Hasan',' Tuhin',500000)
print(profile1)
..........................
..........................
Property Decorator in Python(getter,setter,deleter)

class Profile():
    def __init__(self,fname,lname):
        self.fname=fname
        self.lname=lname
        
    @property
    def email(self):
        return f'{self.fname}{self.lname}@gmail.com'
    @property
    def fullname(self):
        if self.fname==None or self.lname==None:
            return'fullname not set.set it first'
        return f'{self.fname} {self.lname}'
    @fullname.setter
    def fullname(self,name):
        fname,lname=name.split(' ')
        self.fname=fname
        self.lname=lname
    @fullname.deleter
    def fullname(self):
        self.fname=None
        self.lname=None

hassan=Profile('Hassan','Tuhin')
hassan.fullname='G.H Tuhin'
print(hassan.fullname)
del hassan.fullname
print(hassan.fullname)
hassan.fullname='HHHH TTTT'
print(hassan.fullname)

#hassan.lname='Byt'
#print(hassan.email)
...............................
hassan=Profile('Hassan','Tuhin')
import inspect
print(inspect.getmembers(hassan))
...............................
